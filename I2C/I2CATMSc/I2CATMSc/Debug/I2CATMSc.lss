
I2CATMSc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  00800100  00800100  00000282  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000951  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000693  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b3  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ae  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001e0  000001e0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.I2CATM_SlaveSet 0000000c  000001d4  000001d4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_24 000000ec  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000010  000001c4  000001c4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000001e8  000001e8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000001ea  000001ea  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000001ec  000001ec  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000001ae  000001ae  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000001e4  000001e4  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 ff       	sbrs	r16, 2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  ba:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001e0 <__bad_interrupt>:
 1e0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2CATM_SlaveSet:

000001d4 <I2CATM_SlaveSet>:
uint8_t Buffer_Address;
uint8_t rxbuffer[0xFF];
uint8_t txbuffer[0xFF];

void I2CATM_SlaveSet(uint8_t address){
	TWAR = address;
 1d4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<< TWIE)|(1<< TWEA)|(1<< TWINT)|(1<< TWEN);	
 1d8:	85 ec       	ldi	r24, 0xC5	; 197
 1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1de:	08 95       	ret

Disassembly of section .text.__vector_24:

000000c2 <__vector_24>:

void I2C_SlaveStop(void){
	TWCR &= ~((1<< TWEA)|(1<< TWEN));
}

ISR(TWI_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	uint8_t data;
	if(TW_STATUS == TW_SR_SLA_ACK){											//Se recibio correctamente la direccion y el ACK
  d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d8:	88 7f       	andi	r24, 0xF8	; 248
  da:	80 36       	cpi	r24, 0x60	; 96
  dc:	49 f4       	brne	.+18     	; 0xf0 <__vector_24+0x2e>
		Buffer_Address = 0xFF;												//Se prepara para recibir el siguiente byte
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR |= (1<< TWIE)|(1<< TWINT)|(1<< TWEA)|(1<< TWEN); 
  e4:	ec eb       	ldi	r30, 0xBC	; 188
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	85 6c       	ori	r24, 0xC5	; 197
  ec:	80 83       	st	Z, r24
  ee:	56 c0       	rjmp	.+172    	; 0x19c <__vector_24+0xda>
	}
	else if(TW_STATUS == TW_SR_DATA_ACK){									//Se recibe correctamente el dato y el ACK (modo receptor)
  f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	80 38       	cpi	r24, 0x80	; 128
  f8:	21 f5       	brne	.+72     	; 0x142 <__vector_24+0x80>
		data = TWDR;														//Guardar el dato en data
  fa:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		if(Buffer_Address == 0xFF){											//revisar si ya se recibio una direccion
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	8f 3f       	cpi	r24, 0xFF	; 255
 104:	41 f4       	brne	.+16     	; 0x116 <__vector_24+0x54>
			Buffer_Address = data;											
 106:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
			TWCR |= (1<< TWIE)|(1<< TWINT)|(1<< TWEA)|(1<< TWEN);
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	85 6c       	ori	r24, 0xC5	; 197
 112:	80 83       	st	Z, r24
 114:	43 c0       	rjmp	.+134    	; 0x19c <__vector_24+0xda>
		}
		else{
			rxbuffer[Buffer_Address] = data;								//Si ya se recibio un dato, se guarda 
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	90 83       	st	Z, r25
			Buffer_Address++;												//Y aumenta la direccion
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (Buffer_Address < 0xFF){
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	31 f0       	breq	.+12     	; 0x136 <__vector_24+0x74>
				TWCR |= (1<< TWIE)|(1<< TWINT)|(1<< TWEA)|(1<< TWEN);	
 12a:	ec eb       	ldi	r30, 0xBC	; 188
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	85 6c       	ori	r24, 0xC5	; 197
 132:	80 83       	st	Z, r24
 134:	33 c0       	rjmp	.+102    	; 0x19c <__vector_24+0xda>
			}
			else{
				TWCR |= (1<< TWIE)|(1<< TWINT)|(1<< TWEN);					//recibir un ultimo byte de datos
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	85 68       	ori	r24, 0x85	; 133
 13e:	80 83       	st	Z, r24
 140:	2d c0       	rjmp	.+90     	; 0x19c <__vector_24+0xda>
			}
			
		}		
	}
	else if (TW_STATUS == TW_ST_DATA_ACK){									//Si se inidica modo transmisor
 142:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	88 3b       	cpi	r24, 0xB8	; 184
 14a:	19 f5       	brne	.+70     	; 0x192 <__vector_24+0xd0>
		data = TWDR;														
 14c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		if (Buffer_Address == 0xFF){										//Si ya se recibio direccion guarda el dato
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	8f 3f       	cpi	r24, 0xFF	; 255
 156:	11 f4       	brne	.+4      	; 0x15c <__vector_24+0x9a>
			Buffer_Address = data;
 158:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		TWDR = txbuffer[Buffer_Address];									//Se envia el primer dato del buffer 
 15c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ef 5f       	subi	r30, 0xFF	; 255
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
 168:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		Buffer_Address++;													//se aumenta la direccion 
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (Buffer_Address < 0xFF){											//Si hay otro dato por enviar lo envia
 176:	8f 3f       	cpi	r24, 0xFF	; 255
 178:	31 f0       	breq	.+12     	; 0x186 <__vector_24+0xc4>
			TWCR |= (1<< TWIE)|(1<< TWINT)|(1<< TWEA)|(1<< TWEN);
 17a:	ec eb       	ldi	r30, 0xBC	; 188
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	85 6c       	ori	r24, 0xC5	; 197
 182:	80 83       	st	Z, r24
 184:	0b c0       	rjmp	.+22     	; 0x19c <__vector_24+0xda>
		}
		else{																//si no, manda el ultimo y manda un NACK
			TWCR |= (1<< TWIE)|(1<< TWINT)|(1<< TWEN);
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	85 68       	ori	r24, 0x85	; 133
 18e:	80 83       	st	Z, r24
 190:	05 c0       	rjmp	.+10     	; 0x19c <__vector_24+0xda>
		}
	}
	else{																	//Si hay error, se prepara para recibir otra direccion
		TWCR |= (1<< TWIE)|(1<< TWEA)|(1<< TWEN);
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	85 64       	ori	r24, 0x45	; 69
 19a:	80 83       	st	Z, r24
	}
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

Disassembly of section .text.main:

000001c4 <main>:
void I2C_SlaveStop(void);
ISR(TWI_vect);

int main(void)
{
	I2CATM_SlaveSet(0x32);
 1c4:	82 e3       	ldi	r24, 0x32	; 50
 1c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2CATM_SlaveSet>
	sei();
 1ca:	78 94       	sei
		
    while(1)
    {
        txbuffer[0]=128; 
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <txbuffer>
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <main+0x8>

Disassembly of section .text.__dummy_fini:

000001e8 <_fini>:
 1e8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ea <__funcs_on_exit>:
 1ea:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ec <__simulator_exit>:
 1ec:	08 95       	ret

Disassembly of section .text.exit:

000001ae <exit>:
 1ae:	ec 01       	movw	r28, r24
 1b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__funcs_on_exit>
 1b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fini>
 1b8:	ce 01       	movw	r24, r28
 1ba:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__simulator_exit>
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Exit>

Disassembly of section .text._Exit:

000001e4 <_Exit>:
 1e4:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
