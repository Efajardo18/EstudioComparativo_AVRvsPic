
PWMATMc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000024f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000637  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000267  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_21 0000004c  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SETUP_ADC 00000026  0000010e  0000010e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SETUP_PWM 00000010  00000160  00000160  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000016  00000134  00000134  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.valorAdc 00000001  00800100  00800100  00000212  2**0
                  ALLOC
 19 .text.__dummy_fini 00000002  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  0000017c  0000017c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000014a  0000014a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000174  00000174  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  ba:	0c 94 a5 00 	jmp	0x14a	; 0x14a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000170 <__bad_interrupt>:
 170:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_21:

000000c2 <__vector_21>:
//**************************************************************************************
//INTERRUPCIONES
//**************************************************************************************

ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	PORTC ^= 1<<PORTC5;
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	98 27       	eor	r25, r24
  da:	98 b9       	out	0x08, r25	; 8
	valorAdc = ADCH;					//Guardamos el resultado
  dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>

	PORTB = valorAdc;
  e4:	95 b9       	out	0x05, r25	; 5
	OCR0A = valorAdc;					//Cambiamos el duty cicle
  e6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	97 bd       	out	0x27, r25	; 39
	
	ADCSRA |= 1<<ADSC;					//Inicia la conversion nuevamente
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	90 64       	ori	r25, 0x40	; 64
  f4:	90 83       	st	Z, r25
	PORTC ^= 1<<PORTC5;
  f6:	98 b1       	in	r25, 0x08	; 8
  f8:	89 27       	eor	r24, r25
  fa:	88 b9       	out	0x08, r24	; 8

}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

Disassembly of section .text.SETUP_ADC:

0000010e <SETUP_ADC>:


void SETUP_ADC()

{
	ADMUX |= 1<<ADLAR | 1<<REFS0 | 0<<REFS1;		//JUSTIFICA A LA IZQUIERDA EL RESULTADO, ESTABLECE Vcc COMO REFERENCIA
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 66       	ori	r24, 0x60	; 96
 116:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN;                              //ACTIVA EL MODULO	ADC
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;       //PRESCALER DE 128
 122:	80 81       	ld	r24, Z
 124:	87 60       	ori	r24, 0x07	; 7
 126:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADIE | 1<<ADSC ;                   //ACTIVA INTERRUPCIONES E INICIA LA CONVERSIÓN
 128:	80 81       	ld	r24, Z
 12a:	88 64       	ori	r24, 0x48	; 72
 12c:	80 83       	st	Z, r24
	PORTC |= 0<<PORTC5;
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	88 b9       	out	0x08, r24	; 8
 132:	08 95       	ret

Disassembly of section .text.SETUP_PWM:

00000160 <SETUP_PWM>:
}

void SETUP_PWM()

{
	TCCR0A	|=	1<<COM0A1 | 0<<COM0A0 | 1<<WGM01 | 1<<WGM00;	//Establecemos Active-HIGH comp. OCR0A y timer; Modo Fast PWM(255)
 160:	84 b5       	in	r24, 0x24	; 36
 162:	83 68       	ori	r24, 0x83	; 131
 164:	84 bd       	out	0x24, r24	; 36
	TCCR0B	|=	0<<CS02 | 1<<CS01 | 1<<CS00;					//Prescaler de 64 
 166:	85 b5       	in	r24, 0x25	; 37
 168:	83 60       	ori	r24, 0x03	; 3
 16a:	85 bd       	out	0x25, r24	; 37
	OCR0A	=	0x00;											//Duty cicle de 0
 16c:	17 bc       	out	0x27, r1	; 39
 16e:	08 95       	ret

Disassembly of section .text.main:

00000134 <main>:
//**************************************************************************************
//PROGRAMA
//**************************************************************************************
int main()
{
	DDRD = 0xFF;	//Establece los puertos D Y B como salidas
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 138:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x20;	//Establece el 5 como flag de conversión
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	87 b9       	out	0x07, r24	; 7
	sei();			//Activa las interrupciones 	
 13e:	78 94       	sei
	SETUP_ADC();	
 140:	0e 94 87 00 	call	0x10e	; 0x10e <SETUP_ADC>
	SETUP_PWM();
 144:	0e 94 b0 00 	call	0x160	; 0x160 <SETUP_PWM>
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0x14>

Disassembly of section .text.__dummy_fini:

00000178 <_fini>:
 178:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000017a <__funcs_on_exit>:
 17a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017c <__simulator_exit>:
 17c:	08 95       	ret

Disassembly of section .text.exit:

0000014a <exit>:
 14a:	ec 01       	movw	r28, r24
 14c:	0e 94 bd 00 	call	0x17a	; 0x17a <__funcs_on_exit>
 150:	0e 94 bc 00 	call	0x178	; 0x178 <_fini>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 be 00 	call	0x17c	; 0x17c <__simulator_exit>
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 ba 00 	call	0x174	; 0x174 <_Exit>

Disassembly of section .text._Exit:

00000174 <_Exit>:
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
